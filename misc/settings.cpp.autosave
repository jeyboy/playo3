#include "settings.h"

Settings *Settings::self = 0;

Settings *Settings::instance() {
    if(!self)
        self = new Settings();
    return self;
}

void Settings::fromJson(QJsonObject settingsObj) {
    
    showCheckbox = settingsObj.value("show_checkboxes").toBool(true);

    spoilOnActivation = settingsObj.value("spoil_on_activation").toBool(true);
    alertOnFolderDeletion = settingsObj.value("alert_on_folder_deletion").toBool(true);

    showInfo = settingsObj.value("show_info").toBool(true);
    showSystemIcons = settingsObj.value("show_system_icons").toBool(false);
    

    tabPosition = settingsObj.value("tab_position").toInt(0);

    
    treeIndentation = settingsObj.value("tree_indentation").toInt(12);

    customcolorSpectrum = settingsObj.value("customcolor_spectrum").toBool(false);

    QVariant specColorVar = settingsObj.value("spectrum_color").toVariant();
    spectrumColor = specColorVar.isValid() ? specColorVar.value<QColor>() : QColor(0, 0, 0);

    QVariant specColorVar2 = settingsObj.value("spectrum_color2").toVariant();
    spectrumColor2 = specColorVar2.isValid() ? specColorVar2.value<QColor>() : QColor(128, 128, 128);

    QVariant specColorVar3 = settingsObj.value("spectrum_color3").toVariant();
    spectrumColor3 = specColorVar3.isValid() ? specColorVar3.value<QColor>() : QColor(255, 255, 255);


    spectrumFreqRate = settingsObj.value("spectrum_rate").toInt(20);
    spectrumBarsCount = settingsObj.value("spectrum_bars_count").toInt(30);

    spectrumHeight = settingsObj.value("spectrum_height").toInt(60);
    spectrumType = (Playo3::SpectrumType)settingsObj.value("spectrum_type").toInt(1);

    spectrumMultiplier = settingsObj.value("spectrum_multiplier").toInt(3);
}

QJsonObject Settings::toJson() {
    QJsonObject ret = QJsonObject();

    

    ret.insert("show_checkboxes", QJsonValue::fromVariant(showCheckbox));

    ret.insert("spoil_on_activation", QJsonValue::fromVariant(spoilOnActivation));
    ret.insert("alert_on_folder_deletion", QJsonValue::fromVariant(alertOnFolderDeletion));

    ret.insert("show_info", QJsonValue::fromVariant(showInfo));
    ret.insert("show_system_icons", QJsonValue::fromVariant(showSystemIcons));

    ret.insert("item_font_name", QJsonValue::fromVariant(itemFontName));
    ret.insert("item_font_size", QJsonValue::fromVariant(itemFontSize));
    ret.insert("item_text_color", QJsonValue::fromVariant(itemTextColor));
    ret.insert("selected_item_text_color", QJsonValue::fromVariant(selectedItemTextColor));

    ret.insert("item_info_font_name", QJsonValue::fromVariant(itemInfoFontName));
    ret.insert("item_info_font_size", QJsonValue::fromVariant(itemInfoFontSize));
    ret.insert("item_info_text_color", QJsonValue::fromVariant(itemInfoColor));
    ret.insert("selected_item_info_text_color", QJsonValue::fromVariant(selectedItemInfoColor));

    ret.insert("tab_position", QJsonValue::fromVariant(tabPosition));
    
    ret.insert("tree_indentation", QJsonValue::fromVariant(treeIndentation));

    ret.insert("customcolor_spectrum", QJsonValue::fromVariant(customcolorSpectrum));
    ret.insert("spectrum_color", QJsonValue::fromVariant(spectrumColor));
    ret.insert("spectrum_color2", QJsonValue::fromVariant(spectrumColor2));
    ret.insert("spectrum_color3", QJsonValue::fromVariant(spectrumColor3));

    ret.insert("spectrum_rate", QJsonValue::fromVariant(spectrumFreqRate));
    ret.insert("spectrum_bars_count", QJsonValue::fromVariant(spectrumBarsCount));
    ret.insert("spectrum_height", QJsonValue::fromVariant(spectrumHeight));
    ret.insert("spectrum_type", QJsonValue::fromVariant(spectrumType));
    ret.insert("spectrum_multiplier", QJsonValue::fromVariant(spectrumMultiplier));

    return ret;
}
